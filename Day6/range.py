# RANGE
#
# Lâ€™objectif de ce challenge est de recrÃ©er simplement lâ€™objet range natif Ã  Python.
#
# ğŸ‘‰ Initialisez une classe Range, pouvant prendre 3 arguments : une borne infÃ©rieure, 
#Â une borne supÃ©rieure et un pas (facultatif, par dÃ©faut, fixÃ© Ã  1) permettant de gÃ©nÃ©rer 
# une liste de nombres compris entre la borne infÃ©rieure (incluse) et la borne supÃ©rieure (exclue) 
#Â avec le pas indiquÃ© par lâ€™utilisateur. Lâ€™affichage de la classe Range (print(Range(0,6)) 
# devra retourner la liste gÃ©nÃ©rÃ©e. 
#
# Note : tout comme la fonction range en Python, lâ€™utilisateur doit pouvoir indiquer comme paramÃ¨tres 
# une borne infÃ©rieure qui soit plus grande que la borne supÃ©rieure, avec un pas nÃ©gatif, 
# et lâ€™objet sera renvoyÃ© au bon format : Range(6, 0, -1) renverra [6, 5, 4, 3, 2, 1].
#
# ğŸ‘‰ Mettez en place une mÃ©thode reverse() permettant dâ€™inverser lâ€™ordre des Ã©lÃ©ments de lâ€™objet Range. 
# Par exemple : Range(0,4) renverra [0, 1, 2, 3] et Range(0, 4).reverse() renverra [3, 2, 1, 0].

class Range:
    def __init__(self, start, end, step=1):
        self.start = start
        self.end = end
        self.step = step
        self.range_list = self.generate_range()

    def generate_range(self):
        range_list = []
        if self.step == 0:
            raise ValueError("step cannot be zero")

        if self.step > 0 and self.start < self.end:
            number = self.start
            while number < self.end:
                range_list.append(number)
                number += self.step
        elif self.step < 0 and self.start > self.end:
            number = self.start
            while number > self.end:
                range_list.append(number)
                number += self.step

        return range_list

    def reverse(self):
        return self.range_list[::-1]

    def __repr__(self):
        return str(self.range_list)

# Exemples d'utilisation:
print(Range(0, 6))  # [0, 1, 2, 3, 4, 5]
print(Range(6, 0, -1))  # [6, 5, 4, 3, 2, 1]
print(Range(0, 4).reverse())  # [3, 2, 1, 0]